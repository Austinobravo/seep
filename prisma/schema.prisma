// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username     String    @unique
  email        String    @unique
  password     String
  firstName    String?
  lastName     String?
  image        String?
  bio          String?
  phone        String?
  isActive     Boolean   @default(true)
  isBlocked    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  roles        UserRole[]
  category     Category[]
  news         News[]
  gallery         GalleryImage[]
  galleryCategory GalleryCategory[]
  privacypolicy PrivacyPolicy[]
  termsandconditions TermsAndConditions[]
  testimonials Testimonials[]
  teamMember  TeamMember[]


}

model Role {
  id String @id @default(uuid())
  name         String       @unique @default("user")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  users        UserRole[]
  permissions  RolePermission[]


}

model Permission {
  id String @id @default(uuid())
  action       String       // Example: "POST_CREATE", "USER_DELETE"
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  roles        RolePermission[]


}

model UserRole {
  id String @id @default(uuid())
  userId   String
  roleId   String
  user     User     @relation(fields: [userId], references: [id])
  role     Role     @relation(fields: [roleId], references: [id])

  @@unique([userId, roleId])
}

model RolePermission {
  id String @id @default(uuid())
  roleId       String
  permissionId String
  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Category{
  id String @id @default(uuid())
  name String @unique
  slug String?
  description String?

  userId String
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  news News[]
}
model News{
  id String @id @default(uuid())
  title String
  image String
  categoryId String
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  userId String
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)


  slug String @unique
  otherOptions String? @db.Text
  newsContent NewsContent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsContent {
  id String @id @default(uuid())
  heading String?
  paragraph String? @db.Text


  newsId String
  news News @relation(fields: [newsId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model PrivacyPolicy {
  id String @id @default(uuid())
  content String? @db.Text


  userId String
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model TermsAndConditions {
  id String @id @default(uuid())
  content String? @db.Text


  userId String
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model Testimonials {
  id String @id @default(uuid())
  content String @db.Text
  individual_name String
  individual_image String?
  school String
  program String


  userId String
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model Contact {
  id String @id @default(uuid())
  name String 
  email String
  phone String?
  message String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model Join {
  id String @id @default(uuid())
  firstName String 
  lastName String 
  email String @unique
  phone String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model GalleryImage {
  id String @id @default(uuid())
  image String 
  description String?

  
  userId String
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)

  galleryCategoryId String
  gallery GalleryCategory @relation(fields: [galleryCategoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model GalleryCategory {
  id String @id @default(uuid())
  title String @unique
  subtitle String


  galleryImage GalleryImage[]
  userId String
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model TeamMember {
  id String @id @default(uuid())
  image String 
  description String @db.Text
  name String

  
  userId String
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}